{"version":3,"sources":["Core/Tests/CanonicalFormGenerator.spec.ts"],"names":[],"mappings":"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","file":"Core/Tests/CanonicalFormGenerator.spec.js","sourcesContent":["import 'mocha';\r\nimport * as lodash from 'lodash';\r\nimport { expect } from 'chai';\r\nimport { Vertice, Edge, Graph } from '../../Model';\r\nimport { CanonicalFormGenerator } from '../'\r\n\r\ndescribe('CanonicalFormGenerator', () => {\r\n    let emptyValuesArr: Vertice[][] = [undefined, null, []];\r\n\r\n    describe('GenerateCanonicalForm', () => {\r\n        it('Not empty graph - should generate correct label for graph', () => {\r\n            let graph = generateGraph();\r\n\r\n            let canonicalFormGenerator = new CanonicalFormGenerator(graph);\r\n            let canonicalForm = canonicalFormGenerator.GetCanonicalForm();\r\n\r\n            expect(canonicalForm).to.be.deep.equal([['0', '1', 'X', 'a', 'X'], ['1', '2', 'X', 'a', 'Z'], ['2', '0', 'Z', 'b', 'X'], ['1', '3', 'X', 'b', 'Y']]);\r\n        });\r\n\r\n        emptyValuesArr.forEach((val) => it('Graph vertices are ' + val + '- should generate correct label for graph', () => {\r\n            let graph = new Graph();\r\n            graph.V = val;\r\n\r\n            let badFunc = function () {\r\n                let canonicalFormGenerator = new CanonicalFormGenerator(graph);\r\n                let canonicalForm = canonicalFormGenerator.GetCanonicalForm();\r\n            };\r\n\r\n            expect(badFunc).to.throw('There are no edges in the graph');\r\n        }));\r\n\r\n        function generateGraph(): Graph {\r\n            let graph = new Graph();\r\n            let verticeX0 = new Vertice({\r\n                Id: '0',\r\n                label: 'X'\r\n            });\r\n            graph.V.push(verticeX0);\r\n\r\n            let verticeX1 = new Vertice({\r\n                Id: '1',\r\n                label: 'X'\r\n            });\r\n            graph.V.push(verticeX1);\r\n\r\n            let verticeY = new Vertice({\r\n                Id: '3',\r\n                label: 'Y'\r\n            });\r\n            graph.V.push(verticeY);\r\n\r\n            let verticeZ = new Vertice({\r\n                Id: '2',\r\n                label: 'Z'\r\n            });\r\n            graph.V.push(verticeZ);\r\n\r\n            graph.E.push(new Edge({\r\n                id: lodash.uniqueId(),\r\n                label: 'a',\r\n                firstVertice: verticeX0,\r\n                secondVertice: verticeX1\r\n            }));\r\n\r\n            graph.E.push(new Edge({\r\n                id: lodash.uniqueId(),\r\n                label: 'a',\r\n                firstVertice: verticeX1,\r\n                secondVertice: verticeZ\r\n            }));\r\n\r\n            graph.E.push(new Edge({\r\n                id: lodash.uniqueId(),\r\n                label: 'b',\r\n                firstVertice: verticeX1,\r\n                secondVertice: verticeY\r\n            }));\r\n\r\n            graph.E.push(new Edge({\r\n                id: lodash.uniqueId(),\r\n                label: 'b',\r\n                firstVertice: verticeX0,\r\n                secondVertice: verticeZ\r\n            }));\r\n\r\n            return graph;\r\n        }\r\n    });\r\n});"],"sourceRoot":"/source/"}