{"version":3,"sources":["Core/Tests/GraphTrieTests.spec.ts"],"names":[],"mappings":"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","file":"Core/Tests/GraphTrieTests.spec.js","sourcesContent":["import 'mocha';\r\nimport * as lodash from 'lodash';\r\nimport { expect } from 'chai';\r\nimport { Vertice, Edge, Graph } from '../../Model';\r\nimport { GraphTrie } from '../'\r\n\r\ndescribe('GraphTrie', () => {\r\n    describe('Add', () => {\r\n        it('insert one element in new space - should not fail', () => {\r\n            let trie = new GraphTrie();\r\n\r\n            let expectedGraph = new Graph();\r\n            let canonicalLabel = ['1', '2'];\r\n\r\n            trie.Add(expectedGraph, canonicalLabel);\r\n\r\n            let actualGraph = trie.Get(canonicalLabel);\r\n\r\n            expect(actualGraph).to.be.deep.equal(expectedGraph);\r\n\r\n        });\r\n\r\n        it('insert one element in occupied space - should fail', () => {\r\n            let trie = new GraphTrie();\r\n\r\n            let firstGraph = new Graph();\r\n            firstGraph.V.push(new Vertice({ Id: '1' }));\r\n            let secondGraph = new Graph();\r\n            secondGraph.V.push(new Vertice({ Id: '2' }));\r\n            let canonicalLabel = ['1', '2'];\r\n\r\n            trie.Add(firstGraph, canonicalLabel);\r\n\r\n            let badFunc = function () { trie.Add(secondGraph, canonicalLabel); };\r\n\r\n            expect(badFunc).to.throw('Canonical label already exists in trie');\r\n        });\r\n    });\r\n\r\n    describe('Get', () => {\r\n        it('Try get empty element - should return undefined', () => {\r\n            let trie = new GraphTrie();\r\n            let canonicalLabel = ['1', '2'];\r\n\r\n            let actualGraph = trie.Get(canonicalLabel);\r\n\r\n            expect(actualGraph).to.be.undefined;\r\n        });\r\n\r\n        it('Try get elememt with partial canonical label of existing element - should return undefined', () => {\r\n            let trie = new GraphTrie();\r\n            let expectedGraph = new Graph();\r\n            let canonicalLabel = ['1', '2'];\r\n\r\n            trie.Add(expectedGraph, canonicalLabel);\r\n            let actualGraph = trie.Get([canonicalLabel[0]]);\r\n\r\n            expect(actualGraph).to.be.undefined;\r\n        });\r\n\r\n        it('Try get elememt with which canonical label includes the one of an existing element - should return undefined', () => {\r\n            let trie = new GraphTrie();\r\n            let expectedGraph = new Graph();\r\n            let canonicalLabel = ['1', '2'];\r\n\r\n            trie.Add(expectedGraph, canonicalLabel);\r\n            let actualGraph = trie.Get(canonicalLabel.push.apply(['f']));\r\n\r\n            expect(actualGraph).to.be.undefined;\r\n        });\r\n    });\r\n\r\n});"],"sourceRoot":"/source/"}