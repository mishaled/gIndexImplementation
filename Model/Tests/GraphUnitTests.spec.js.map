{"version":3,"sources":["Model/Tests/GraphUnitTests.spec.ts"],"names":[],"mappings":";;AAAA,iBAAe;AAEf,6BAA8B;AAC9B,wBAA2C;AAE3C,QAAQ,CAAC,OAAO,EAAE;IACd,IAAI,cAAc,GAAgB,CAAC,SAAS,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IAExD,QAAQ,CAAC,SAAS,EAAE;QAChB,IAAI,cAAc,GAAQ,CAAC,SAAS,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;QAEhD,CAAC;YACG,cAAc,CAAC,OAAO,CAAC,UAAC,QAAa;gBACjC,cAAc,CAAC,OAAO,CAAC,UAAC,SAAc;oBAClC,EAAE,CAAC,cAAc,GAAG,SAAS,GAAG,iBAAiB,GAAG,QAAQ,GAAG,sBAAsB,EACjF;wBACI,IAAI,KAAK,GAAU,IAAI,QAAK,EAAE,CAAC;wBAC/B,KAAK,CAAC,CAAC,GAAG,SAAS,CAAC;wBACpB,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC;wBAEnB,IAAI,SAAS,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;wBAEhC,aAAM,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;oBACjC,CAAC,CAAC,CAAC;gBACX,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,cAAc,GAAG,QAAQ,GAAG,4CAA4C,EACvE;oBACI,IAAI,KAAK,GAAU,IAAI,QAAK,EAAE,CAAC;oBAC/B,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC;oBACnB,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,OAAI,EAAE,CAAC,CAAC;oBAEzB,IAAI,SAAS,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;oBAEhC,aAAM,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC;gBAClC,CAAC,CAAC,CAAC;gBAEP,EAAE,CAAC,wCAAwC,GAAG,QAAQ,GAAG,wBAAwB,EAC7E;oBACI,IAAI,KAAK,GAAU,IAAI,QAAK,EAAE,CAAC;oBAC/B,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,UAAO,EAAE,CAAC,CAAC;oBAC5B,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC;oBAEnB,IAAI,SAAS,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;oBAEhC,aAAM,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC;gBAClC,CAAC,CAAC,CAAC;YACX,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,EAAE,CAAC;QAEL,EAAE,CAAC,6DAA6D,EAC5D;YACI,IAAI,KAAK,GAAU,IAAI,QAAK,EAAE,CAAC;YAC/B,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,UAAO,EAAE,CAAC,CAAC;YAC5B,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,OAAI,EAAE,CAAC,CAAC;YAEzB,IAAI,SAAS,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;YAEhC,aAAM,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC;QAClC,CAAC,CAAC,CAAC;IACX,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","file":"Model/Tests/GraphUnitTests.spec.js","sourcesContent":["import 'mocha';\r\nimport * as lodash from 'lodash';\r\nimport { expect } from 'chai';\r\nimport { Vertice, Edge, Graph } from '../';\r\n\r\ndescribe('Graph', () => {\r\n    let emptyValuesArr: Vertice[][] = [undefined, null, []];\r\n\r\n    describe('IsEmpty', () => {\r\n        let emptyValuesArr: any = [undefined, null, []];\r\n\r\n        (() => {\r\n            emptyValuesArr.forEach((firstVal: any) => {\r\n                emptyValuesArr.forEach((secondVal: any) => {\r\n                    it('Vertices is ' + secondVal + ' and edged are ' + firstVal + '- should return true',\r\n                        () => {\r\n                            let graph: Graph = new Graph();\r\n                            graph.V = secondVal;\r\n                            graph.E = firstVal;\r\n\r\n                            let returnVal = graph.IsEmpty();\r\n\r\n                            expect(returnVal).to.be.true;\r\n                        });\r\n                });\r\n\r\n                it('Vertices is ' + firstVal + ' and edged not empty - should return false',\r\n                    () => {\r\n                        let graph: Graph = new Graph();\r\n                        graph.V = firstVal;\r\n                        graph.E.push(new Edge());\r\n\r\n                        let returnVal = graph.IsEmpty();\r\n\r\n                        expect(returnVal).to.be.false;\r\n                    });\r\n\r\n                it('Vertices are not empty and edged are: ' + firstVal + ' - should return false',\r\n                    () => {\r\n                        let graph: Graph = new Graph();\r\n                        graph.V.push(new Vertice());\r\n                        graph.E = firstVal;\r\n\r\n                        let returnVal = graph.IsEmpty();\r\n\r\n                        expect(returnVal).to.be.false;\r\n                    });\r\n            });\r\n        })();\r\n\r\n        it('Both edges and vertices are not empty - should return false',\r\n            () => {\r\n                let graph: Graph = new Graph();\r\n                graph.V.push(new Vertice());\r\n                graph.E.push(new Edge());\r\n\r\n                let returnVal = graph.IsEmpty();\r\n\r\n                expect(returnVal).to.be.false;\r\n            });\r\n    });\r\n});"],"sourceRoot":"/source/"}