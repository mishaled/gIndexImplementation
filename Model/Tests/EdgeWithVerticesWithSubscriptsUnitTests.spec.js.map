{"version":3,"sources":["Model/Tests/EdgeWithVerticesWithSubscriptsUnitTests.spec.ts"],"names":[],"mappings":";;AAAA,iBAAe;AAEf,6BAA8B;AAC9B,wBAA2E;AAE3E,QAAQ,CAAC,gCAAgC,EAAE;IACvC,IAAI,cAAc,GAA2B,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IAC/D,IAAI,WAAW,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IAEhC,QAAQ,CAAC,iBAAiB,EAAE;QACxB,QAAQ,CAAC,cAAc,EAAE;YACrB,cAAc,CAAC,OAAO,CAAC,UAAC,QAAQ;gBAC5B,cAAc,CAAC,OAAO,CAAC,UAAC,SAAS;oBAC7B,EAAE,CAAC,uCAAuC,GAAG,QAAQ,GAAG,qBAAqB,GAAG,SAAS,GAAG,qCAAqC,EAAE;wBAC/H,IAAI,IAAI,GAAG,IAAI,iCAA8B,EAAE,CAAC;wBAChD,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC;wBAC7B,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC;wBAE/B,IAAI,OAAO,GAAG,cAAc,IAAI,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA,CAAC,CAAC,CAAC;wBAE1F,aAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC;oBACvD,CAAC,CAAC,CAAC;oBAEH,EAAE,CAAC,wCAAwC,GAAG,QAAQ,GAAG,qBAAqB,GAAG,SAAS,GAAG,qCAAqC,EAAE;wBAChI,IAAI,IAAI,GAAG,IAAI,iCAA8B,EAAE,CAAC;wBAChD,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC;wBAC7B,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC;wBAE/B,IAAI,OAAO,GAAG,cAAc,IAAI,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,aAAa,CAAC,CAAA,CAAC,CAAC,CAAC;wBAE3F,aAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC;oBACvD,CAAC,CAAC,CAAC;gBACP,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;YAEH,cAAc,CAAC,OAAO,CAAC,UAAC,GAAG;gBACvB,EAAE,CAAC,uCAAuC,GAAG,GAAG,GAAG,qCAAqC,EAAE;oBACtF,IAAI,IAAI,GAAG,IAAI,iCAA8B,EAAE,CAAC;oBAChD,IAAI,CAAC,aAAa,GAAG,IAAI,uBAAoB,EAAE,CAAC;oBAEhD,IAAI,OAAO,GAAG,cAAc,IAAI,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA,CAAC,CAAC,CAAC;oBAE1F,aAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC;gBACvD,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,wCAAwC,GAAG,GAAG,GAAG,qCAAqC,EAAE;oBACvF,IAAI,IAAI,GAAG,IAAI,iCAA8B,EAAE,CAAC;oBAChD,IAAI,CAAC,aAAa,GAAG,IAAI,uBAAoB,EAAE,CAAC;oBAEhD,IAAI,OAAO,GAAG,cAAc,IAAI,aAAa,GAAG,IAAI,CAAC,eAAe,CAAE,IAAI,CAAC,aAAa,CAAC,CAAA,CAAC,CAAC,CAAC;oBAE5F,aAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC;gBACvD,CAAC,CAAC,CAAA;YACN,CAAC,CAAC,CAAC;YAEH,cAAc,CAAC,OAAO,CAAC,UAAC,GAAG;gBACvB,EAAE,CAAC,wCAAwC,GAAG,GAAG,GAAG,qCAAqC,EAAE;oBACvF,IAAI,IAAI,GAAG,IAAI,iCAA8B,EAAE,CAAC;oBAChD,IAAI,CAAC,YAAY,GAAG,IAAI,uBAAoB,EAAE,CAAC;oBAE/C,IAAI,OAAO,GAAG,cAAc,IAAI,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA,CAAC,CAAC,CAAC;oBAE1F,aAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;gBACxD,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,yCAAyC,GAAG,GAAG,GAAG,qCAAqC,EAAE;oBACxF,IAAI,IAAI,GAAG,IAAI,iCAA8B,EAAE,CAAC;oBAChD,IAAI,CAAC,YAAY,GAAG,IAAI,uBAAoB,EAAE,CAAC;oBAE/C,IAAI,OAAO,GAAG,cAAc,IAAI,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,aAAa,CAAC,CAAA,CAAC,CAAC,CAAC;oBAE3F,aAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;gBACxD,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,cAAc,EAAE;YACrB,EAAE,CAAC,mDAAmD,EAAE;gBACpD,IAAI,IAAI,GAAG,IAAI,iCAA8B,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;gBACvE,IAAI,CAAC,YAAY,GAAG,IAAI,uBAAoB,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;gBACtE,IAAI,CAAC,aAAa,GAAG,IAAI,uBAAoB,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;gBAEvE,IAAI,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBAE5D,aAAM,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;YACtE,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,wEAAwE,EAAE;gBACzE,IAAI,IAAI,GAAG,IAAI,iCAA8B,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;gBACvE,IAAI,CAAC,YAAY,GAAG,IAAI,uBAAoB,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;gBACtE,IAAI,CAAC,aAAa,GAAG,IAAI,uBAAoB,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;gBAEvE,IAAI,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBAE7D,aAAM,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;YACtE,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","file":"Model/Tests/EdgeWithVerticesWithSubscriptsUnitTests.spec.js","sourcesContent":["import 'mocha';\r\nimport * as lodash from 'lodash';\r\nimport { expect } from 'chai';\r\nimport { VerticeWithSubscript, EdgeWithVerticesWithSubscripts } from '../';\r\n\r\ndescribe('EdgeWithVerticesWithSubscripts', () => {\r\n    let emptyValuesArr: VerticeWithSubscript[] = [undefined, null];\r\n    let truthValues = [false, true];\r\n\r\n    describe('ToCanonicalForm', () => {\r\n        describe('empty values', () => {\r\n            emptyValuesArr.forEach((firstVal) => {\r\n                emptyValuesArr.forEach((secondVal) => {\r\n                    it('From first vertice, first vertice is ' + firstVal + ' and the second is ' + secondVal + ' - should throw error appropriately', () => {\r\n                        let edge = new EdgeWithVerticesWithSubscripts();\r\n                        edge.firstVertice = firstVal;\r\n                        edge.secondVertice = secondVal;\r\n\r\n                        let badFunc = function () { let canonicalForm = edge.ToCanonicalForm(edge.firstVertice) };\r\n\r\n                        expect(badFunc).to.throw('First vertice is empty');\r\n                    });\r\n\r\n                    it('From second vertice, first vertice is ' + firstVal + ' and the second is ' + secondVal + ' - should throw error appropriately', () => {\r\n                        let edge = new EdgeWithVerticesWithSubscripts();\r\n                        edge.firstVertice = firstVal;\r\n                        edge.secondVertice = secondVal;\r\n\r\n                        let badFunc = function () { let canonicalForm = edge.ToCanonicalForm(edge.secondVertice) };\r\n\r\n                        expect(badFunc).to.throw('First vertice is empty');\r\n                    });\r\n                });\r\n            });\r\n\r\n            emptyValuesArr.forEach((val) => {\r\n                it('From first vertice, first vertice is ' + val + ' - should throw error appropriately', () => {\r\n                    let edge = new EdgeWithVerticesWithSubscripts();\r\n                    edge.secondVertice = new VerticeWithSubscript();\r\n\r\n                    let badFunc = function () { let canonicalForm = edge.ToCanonicalForm(edge.firstVertice) };\r\n\r\n                    expect(badFunc).to.throw('First vertice is empty');\r\n                });\r\n\r\n                it('From second vertice, first vertice is ' + val + ' - should throw error appropriately', () => {\r\n                    let edge = new EdgeWithVerticesWithSubscripts();\r\n                    edge.secondVertice = new VerticeWithSubscript();\r\n\r\n                    let badFunc = function () { let canonicalForm = edge.ToCanonicalForm( edge.secondVertice) };\r\n\r\n                    expect(badFunc).to.throw('First vertice is empty');\r\n                })\r\n            });\r\n\r\n            emptyValuesArr.forEach((val) => {\r\n                it('From first vertice, Second vertice is ' + val + ' - should throw error appropriately', () => {\r\n                    let edge = new EdgeWithVerticesWithSubscripts();\r\n                    edge.firstVertice = new VerticeWithSubscript();\r\n\r\n                    let badFunc = function () { let canonicalForm = edge.ToCanonicalForm(edge.firstVertice) };\r\n\r\n                    expect(badFunc).to.throw('second vertice is empty');\r\n                });\r\n\r\n                it('From second vertice, Second vertice is ' + val + ' - should throw error appropriately', () => {\r\n                    let edge = new EdgeWithVerticesWithSubscripts();\r\n                    edge.firstVertice = new VerticeWithSubscript();\r\n\r\n                    let badFunc = function () { let canonicalForm = edge.ToCanonicalForm(edge.secondVertice) };\r\n\r\n                    expect(badFunc).to.throw('second vertice is empty');\r\n                });\r\n            });\r\n        });\r\n\r\n        describe('Correct edge', () => {\r\n            it('from first vertice - should return correct result', () => {\r\n                let edge = new EdgeWithVerticesWithSubscripts({ id: '0', label: 'a' });\r\n                edge.firstVertice = new VerticeWithSubscript({ Id: '0', label: 'X' });\r\n                edge.secondVertice = new VerticeWithSubscript({ Id: '1', label: 'Y' });\r\n\r\n                let canonicalForm = edge.ToCanonicalForm(edge.firstVertice);\r\n\r\n                expect(canonicalForm).to.be.deep.equal(['0', '1', 'X', 'a', 'Y']);\r\n            });\r\n\r\n            it('from second vertice, backwards if false - should return correct result', () => {\r\n                let edge = new EdgeWithVerticesWithSubscripts({ id: '0', label: 'a' });\r\n                edge.firstVertice = new VerticeWithSubscript({ Id: '0', label: 'X' });\r\n                edge.secondVertice = new VerticeWithSubscript({ Id: '1', label: 'Y' });\r\n\r\n                let canonicalForm = edge.ToCanonicalForm(edge.secondVertice);\r\n\r\n                expect(canonicalForm).to.be.deep.equal(['1', '0', 'Y', 'a', 'X']);\r\n            });\r\n        });\r\n    });\r\n});"],"sourceRoot":"/source/"}