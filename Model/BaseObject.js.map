{"version":3,"sources":["Model/BaseObject.ts"],"names":[],"mappings":"AAAA,oCAAoC;AAEpC,wCAAwC;AACxC,0CAA0C;AAC1C,wDAAwD;AACxD,WAAW;AACX,IAAI;AAGJ,uCAAuC;AAEvC,gDAAgD;AAChD,oCAAoC;AAEpC,mDAAmD;AACnD,kDAAkD;AAClD,WAAW;AAEX,uFAAuF;AACvF,oCAAoC;AACpC,gCAAgC;AAChC,gBAAgB;AAEhB,6CAA6C;AAE7C,mEAAmE;AACnE,6CAA6C;AAC7C,uDAAuD;AACvD,6CAA6C;AAC7C,iEAAiE;AACjE,2BAA2B;AAE3B,mEAAmE;AACnE,8BAA8B;AAC9B,sEAAsE;AACtE,uBAAuB;AACvB,mBAAmB;AACnB,eAAe;AAEf,wDAAwD;AACxD,WAAW;AAEX,wDAAwD;AACxD,gFAAgF;AAChF,WAAW;AAEX,gEAAgE;AAChE,yDAAyD;AACzD,YAAY;AACZ,OAAO","file":"Model/BaseObject.js","sourcesContent":["// import * as lodash from 'lodash';\r\n\r\n// export abstract class BaseObject<T> {\r\n//     // constructor(partialObject?: T) {\r\n//     //     (<any>Object).assign(this, partialObject);\r\n//     // }\r\n// }\r\n\r\n\r\n// // import * as lodash from 'lodash';\r\n\r\n// // export default abstract class BaseObject {\r\n// //     [key: string]: BaseObject;\r\n\r\n// //     constructor(partialObject?: BaseObject) {\r\n// //         this.mergeDeep(this, partialObject);\r\n// //     }\r\n\r\n// //     private mergeDeep(target: BaseObject, ...sources: BaseObject[]): BaseObject {\r\n// //         if (!sources.length) {\r\n// //             return target;\r\n// //         };\r\n\r\n// //         const source = sources.shift();\r\n\r\n// //         if (this.isObject(target) && this.isObject(source)) {\r\n// //             for (const key in source) {\r\n// //                 if (this.isObject(source[key])) {\r\n// //                     if (!target[key]) {\r\n// //                         this.assign(target, { [key]: {} });\r\n// //                     }\r\n\r\n// //                     this.mergeDeep(target[key], source[key]);\r\n// //                 } else {\r\n// //                     this.assign(target, { [key]: source[key] });\r\n// //                 }\r\n// //             }\r\n// //         }\r\n\r\n// //         return this.mergeDeep(target, ...sources);\r\n// //     }\r\n\r\n// //     private isObject(item: BaseObject) : boolean {\r\n// //         return (item && typeof item === 'object' && !Array.isArray(item));\r\n// //     }\r\n\r\n// //     private assign(...objects: BaseObject[]): BaseObject {\r\n// //         return (<any>Object).assign(this, objects);\r\n// //     };\r\n// // }"],"sourceRoot":"/source/"}